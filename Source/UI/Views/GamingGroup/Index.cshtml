@model UI.Models.GamingGroup.GamingGroupViewModel
@using UI.HtmlHelpers
@{
    ViewBag.Title = Model.Name;
    Layout = MVC.Shared.Views._BaseLayout;
}

<h2><span class="editable-title" id="gamingGroupTitle">@Model.Name</span></h2>

<hr />

<a name="@ViewBag.PlayerSectionAnchorText"></a>
<div class="row">
    @Html.Partial("~/Views/Player/_Players.cshtml", Model.Players)
</div>

<a name="@ViewBag.GameDefinitionSectionAnchorText"></a>
<div class="row">
    @Html.Partial("~/Views/GameDefinition/_GameDefinitionsPartial.cshtml", Model.GameDefinitions)
</div>


<a name="@ViewBag.RecentGamesSectionAnchorText"></a>
<div class="row">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 class="fl-left">
                Record A Played Game @ViewBag.RecentGamesMessage
            </h4>
            <div class="fl-right">
                @Html.ActionLink("Create New", "Create", "PlayedGame", new { }, new { @class = "btn btn-primary" })
            </div>
            <div class="fl-clear"></div>
        </div>

        <div class="panel-body">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th class="col-md-4">
                                Game Name
                            </th>
                            <th class="col-md-2">
                                Date Played
                            </th>
                            <th class="col-md-5">
                                Result
                            </th>
                            <th class="col-md-1">

                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.RecentGames)
                        {
                            <tr>
                                <td>
                                    @Html.ActionLink(item.GameDefinitionName, "Details", "GameDefinition", new { id = item.GameDefinitionId }, new { })
                                </td>
                                <td>
                                    @item.DatePlayed.ToShortDateString()
                                </td>
                                <td>
                                    @foreach (var result in item.PlayerResults)
                                    {
                                        <div class="row">
                                            <div class="col-sm-6">
                                                @Html.ActionLink(result.PlayerName, "Details", "Player", new { id = result.PlayerId }, new { })
                                            </div>
                                            <div class="col-sm-6">
                                                @Html.GameResults(result)
                                            </div>
                                        </div>
                                    }
                                </td>
                                <td>
                                    <a href="@Url.Action("Details", "PlayedGame", new { id = item.PlayedGameId })" title="Details">
                                        <i class="fa fa-book fa-3x"></i>
                                    </a>
                                    @if (item.UserCanEdit)
                                    {
                                        <a href="@Url.Action("Delete", "PlayedGame", new { id = item.PlayedGameId })" title="Delete">
                                            <i class="fa fa-trash-o fa-3x"></i>
                                        </a>
                                    }
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<div class="row panel-group">
    <div class="col-md-2">
        <h4>Invite Other Admins</h4>
    </div>
</div>
<div class="row">
    <div class="form-horizontal">
        @using (Html.BeginForm("GrantAccess", "GamingGroup"))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                @Html.Label("Invitee Email Address*", new { @class = "control-label col-md-2" })
                @Html.TextBoxFor(model => model.InviteeEmail, new { @class = "form-control col-md-2" })

                <div class="col-md-2">
                    <span data-toggle="tooltip" title="This only allows a player to register with this email address and will place them directly into this Gaming Group.">
                        <i class="glyphicon glyphicon-question-sign"></i>
                    </span>
                    @Html.ValidationMessageFor(model => model.InviteeEmail)
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2">
                    <input type="submit" value="Grant Access To Gaming Group" class="btn btn-primary" />
                </div>
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4>Past Invites</h4>
        </div>
        <div class="panel-body">
            <div class="table-responsive">
                <table class="table table-hover table-condensed">
                    <thead>
                        <tr>
                            <th>
                                Event
                            </th>
                            <th>
                                Details
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Invitations.Count(); i++)
                        {
                            if (Model.Invitations[i].DateRegistered != null)
                            {
                                @:<tr class="active">
                            }
                            else
                            {
                                @:<tr>
                            }

                            <td>
                                <em>@Html.DisplayNameFor(model => model.Invitations[i].InviteeEmail)</em>
                            </td>
                            <td>
                                @Html.DisplayFor(model => model.Invitations[i].InviteeEmail)
                            </td>
                            @:</tr>


                            if (Model.Invitations[i].DateRegistered != null)
                            {
                                <tr class="active">
                                    <td>
                                        <em>@Html.DisplayNameFor(model => model.Invitations[i].DateRegistered)</em>
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => model.Invitations[i].DateRegistered)
                                    </td>
                                </tr>
                                <tr class="active">
                                    <td>
                                        <em>@Html.DisplayNameFor(model => model.Invitations[i].RegisteredUserName)</em>
                                    </td>
                                    <td>
                                        @Html.DisplayFor(model => model.Invitations[i].RegisteredUserName)
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        //Creation
        $(document).ready(function () {
            var players = new window.Views.Player.Players();
            players.init();

            var createOrUpdatePlayer = new window.Views.Player.CreateOrUpdate();
            createOrUpdatePlayer.init($.proxy(players.onPlayerSaved, players));

            var gameDefinition = new window.Views.GameDefinition.CreateGameDefinitionPartial();
            gameDefinition.init();

            var gameDefinitions = new window.Views.GameDefinition.GameDefinitions();
            gameDefinitions.init();
            gameDefinition.onDefinitionCreated = $.proxy(gameDefinitions.onGameCreated, gameDefinitions);

            var gamingGroupView = new Views.GamingGroup.GamingGroupView();
            gamingGroupView.init();
        });
    </script>
}
