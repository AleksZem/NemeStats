@model UI.Models.GamingGroup.GamingGroupViewModel
@{
    ViewBag.Title = Model.Name;
    Layout = MVC.Shared.Views._BaseLayout;
}

<h2 class="page-header">
    @Model.Name
    &nbsp;<a href="@Url.Action("Edit", "GamingGroup", new { id = @Model.Id })" title="Edit">
        <span class="fa fa-pencil"></span>
    </a>
</h2>

<div class="row">
    @Html.Partial(MVC.GamingGroup.Views._GamingGroupPublicDetailsPartial, Model.PublicDetailsView, new ViewDataDictionary { { "canEdit", true } })
</div>

<hr />

@using (Html.BeginForm(MVC.GamingGroup.Index(), FormMethod.Get))
{
    <label for="from">Filter Data From:</label>
    <input type="text" id="from-date-picker" name="FromDate"/>
    <label for="to">to</label>
    <input type="text" id="to-date-picker" name="ToDate"/>
    <button class="btn btn-primary" type="submit">Filter Statistics</button>
    <br />@Html.ValidationMessage("dateRangeFilter")
}

<a name="@ViewBag.PlayerSectionAnchorText"></a>

<div class="row">
    @{
        Html.RenderPartial(MVC.Player.Views._PlayersPartial, Model.Players, new ViewDataDictionary { { "canEdit", true } });
    }
</div>

<a name="@ViewBag.GameDefinitionSectionAnchorText"></a>
<div class="row">
    @Html.Partial(MVC.GameDefinition.Views._GameDefinitionsPartial, Model.GameDefinitionSummaries, new ViewDataDictionary { { "canEdit", true } })
</div>

<a name="@ViewBag.RecentGamesSectionAnchorText"></a>
<div class="row">
    @Html.Partial(MVC.PlayedGame.Views._PlayedGamesPartial, Model.PlayedGames, new ViewDataDictionary { { "canEdit", true }, { "gamingGroupId", @Model.Id } })
</div>

<div id="NemeStatsPointsLineGraph">
    <svg style='height:500px;'> </svg>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/d3")
    @Styles.Render("~/bundles/d3/css")
    <script type="text/javascript">
        //Creation
        $(document).ready(function () {
            var players = new window.Views.Player.Players();
            players.init();

            var createOrUpdatePlayer = new window.Views.Player.CreateOrUpdate();
            createOrUpdatePlayer.init($.proxy(players.onPlayerSaved, players));

            var gameDefinition = new window.Views.GameDefinition.CreateGameDefinitionPartial();
            gameDefinition.init();

            var gameDefinitions = new window.Views.GameDefinition.GameDefinitions();
            gameDefinitions.init();
            gameDefinition.onDefinitionCreated = $.proxy(gameDefinitions.onGameCreated, gameDefinitions);

            var fromDate = new Date(@Model.DateRangeFilter.FromDate.Year, (@Model.DateRangeFilter.FromDate.Month - 1), @Model.DateRangeFilter.FromDate.Day);
            var toDate = new Date(@Model.DateRangeFilter.ToDate.Year, (@Model.DateRangeFilter.ToDate.Month - 1), @Model.DateRangeFilter.ToDate.Day);

            var gamingGroupView = new Views.GamingGroup.GamingGroupView();
            var fromDateYYYYMMDD = fromDate.toISOString().split("T")[0];
            var toDateYYYYMMDD = toDate.toISOString().split("T")[0];
            gamingGroupView.renderNemeStatsPointsLineGraph("/api/v2/PlayedGames/?gamingGroupId=" + @Model.Id + "&datePlayedFrom=" + fromDateYYYYMMDD + "&datePlayedTo=" + toDateYYYYMMDD);

            var googleAnalyticsObject = new window.Views.Shared.GoogleAnalytics();

            var options = {
                fromDate : fromDate,
                toDate : toDate
            };
            gamingGroupView.init(googleAnalyticsObject, options);

            var recordexceldownload = new window.Views._PlayedGamesPartial.EventTracking();
            recordexceldownload.init(googleAnalyticsObject);
        });
    </script>
}