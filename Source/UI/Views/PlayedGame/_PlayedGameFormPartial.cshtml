@model UI.Models.PlayedGame.PlayedGameEditViewModel

@Html.AntiForgeryToken()
<div class="form-horizontal">
	<div class="form-group">
		<input type="hidden" value="@ViewBag.GameDefinitionId" id="newGameDefinition" />
		@Html.LabelFor(model => model.GameDefinitionId, "The Game", new { @class = "control-label col-md-3" })
		<div class="col-md-6">
			@Html.DropDownList("GameDefinitionId", Model.GameDefinitions, "Pick A Game", new
							{
								@id = "gameDefinitionDropDown",
								@class = "form-control",
								data_numOfDefinitions = Model.GameDefinitions.Count(),
								data_trigger = "focus",
								data_content = "No game definitions detected. Please create a game definition before proceeding. " +
												"<a href='/GameDefinition/Create?returnUrl=/PlayedGame/Create'>Create Game Definition</a>",
								data_placement = "top"
							})
			@Html.ValidationMessageFor(model => model.GameDefinitionId)
		</div>
	</div>

	<div class="form-group">
		@Html.LabelFor(model => model.DatePlayed, "Date Played", new { @class = "control-label col-md-3" })
		<div class="col-md-6">
			@Html.TextBox("DatePlayed", "", new { @class = "date-picker" })
			@Html.ValidationMessageFor(model => model.DatePlayed)
		</div>
	</div>
	<div class="form-group" id="playerDiv">
		@Html.LabelFor(model => model.PlayerRanks, "The Players", new { @class = "control-label col-md-3" })
		<div class="col-md-6">
			@Html.DropDownList("Players", Model.Players, "Add A Player", new { @class = "form-control" })
			<span id="players-error" class="field-validation-error hidden">
				<span class="">Each game must have at least one player.</span>
			</span>
			<span id="players-error-rank-too-high" class="field-validation-error hidden">
				<span class="">No player can have a rank higher than the max number of players.</span>
			</span>
			@Html.ValidationMessageFor(model => model.PlayerRanks)
		</div>
		<div class="col-md-3">
			<button type="button" id="btnAddPlayer" class=" btn btn-default" title="Create New Player">
				<i class="fa fa-plus"></i>
			</button>
		</div>
	</div>
	<div class="form-group">
		<div class="col-md-3">
		</div>
		<div class="col-md-9">
			@{
				if (Model.PreviousGameId > 0)
				{
					<ul id="rankedPlayers" class="sortable" data-numrankedplayers="(Model.PlayerRanks.Count + 1)">
						@foreach (var item in Model.PlayerRanks)
						{
							var playerName = Model.ExistingRankedPlayerNames.Where(x => x.Value.ToString() == item.PlayerId.ToString()).SingleOrDefault().Key;
							Html.RenderPartial(MVC.PlayedGame.Views._PlayedGamesPlayerPartial, new UI.Models.PlayedGame.EditPlayedGamePlayerPartialViewModel { PlayerId = item.PlayerId, PlayerName = playerName, GameRank = item.GameRank });
						}
					</ul>
				}
				else
				{
					<ul id="rankedPlayers" class="sortable" data-numrankedplayers="0"></ul>
				}
			}
		</div>
	</div>

	<div class="form-group">
		@Html.LabelFor(model => model.Notes, "Game Notes", new { @class = "control-label col-md-3" })
		<div class="col-md-9">
			@Html.TextAreaFor(model => model.Notes, new { @style = "width:100%", @rows = "8" })
			@Html.ValidationMessageFor(model => model.Notes)
		</div>
	</div>

	<div class="form-group">
		<div class="col-md-offset-3 col-md-3">
			<button class="btn btn-primary btn-recordgame" id="btnCreatePlayedGameButton" title="Record a normal game with winners and losers">Record Game</button>
			<button class="btn btn-success btn-recordgame" id="btnEveryoneWonButton" title="Record a game where everyone won (e.g. you saved the world in Pandemic)">Everyone Won <i class="fa fa-smile-o"></i></button>
			<button class="btn btn-danger btn-recordgame" id="btnEveryoneLostButton" title="Record a game where everyone lost (e.g. no one survived in Zombicide)">Everyone Lost <i class="fa fa-frown-o"></i></button>
		</div>
	</div>
</div>