@using System.Activities.Expressions
@model UI.Models.PlayedGame.PlayedGameEditViewModel
@{
	ViewBag.Title = "Record a game";
	Layout = MVC.Shared.Views._BaseLayout;
}
<h2>@ViewBag.Title</h2>
<hr />
<div class="panel panel-primary">
	<div class="panel-heading">
		<h4>Game played</h4>
	</div>
	<div class="panel-body">
		<div class="row">
			<div class="col-md-5">
				@using (Html.BeginForm("UpdateGamingGroupName", MVC.PlayedGame.Name, new { previousGameId = @Model.PreviousGameId }, FormMethod.Post, new { id = "recordPlayedGame" }))
				{
					@Html.Partial(MVC.PlayedGame.Views._PlayedGameFormPartial, Model)
				}
			</div>
			<div id="addPlayer" class="col-md-7 hidden" style="margin-top: 90px">
				<a href="#addPlayer" id="addPlayerAnchor"></a>
				@Html.Action("SavePlayer", "Player")
			</div>
		</div>
	</div>
</div>

<div id="createdPlayedGameBack">
	@Html.ActionLink("Back To List", "Index", "GamingGroup", null, null, UI.Controllers.GamingGroupController.SECTION_ANCHOR_RECENT_GAMES, null, null)
</div>
@section Scripts{
	<script type="text/javascript">
	    //Creation
	    $(document).ready(function() {
	        var createPlayedGame = new window.Views.PlayedGame.CreatePlayedGame();
	        var googleAnalyticsObject = new window.Views.Shared.GoogleAnalytics();
	        var rankedPlayers = @Html.Raw(Json.Encode(
	                                                  (Model.PlayerRanks).Select(player => new
	                                                  {
	                                                      playerIndex = @Model.PlayerRanks.IndexOf(player),
	                                                      playerId = player.PlayerId,
	                                                      playerName = @Model.ExistingRankedPlayerNames.SingleOrDefault(key => key.Value == player.PlayerId).Key,
	                                                      playerRank = player.GameRank
	                                                  })
	                                          )
	                                 );
		createPlayedGame.init(googleAnalyticsObject, rankedPlayers);

		var createOrUpdatePlayer = new window.Views.Player.CreateOrUpdate();
		createOrUpdatePlayer.init($.proxy(createPlayedGame.onPlayerCreated, createPlayedGame));
	});
</script>
}